#!/bin/bash

keyfile="/home/$USER/sour/key"
if [[ -e "$keyfile" ]]; then
    source /home/$USER/sour/key
else
    echo "$keyfile does not exist! exiting..." >&2
    exit 1
fi


function usage {
cat <<EOF
sour: upload to imgur faster

usage:
    -h, --help              help
    -v, --verbose           verbose output
    -q, --quiet             suppres output, even errors (useful with weechat's /shell script)
    -s, --select            select area (does scrot -s)
    -f, --forum             BBCode format for forums (uses [url=...] and a thumbnail)
    -t, --thumb             also make thumbnail (included as part of -f)
    -n, --nodel             don't delete images when done
    -d, --download {URL}    don't scrot; download {URL} instead
    -e, --existing {PATH}   don't scrot; use image in {PATH}

-options must be used separately (i.e.: "-s -f", not "-sf")
-register for your own key at http://imgur.com/register/api_anon
EOF
}

function upload {
    curl -s -F "image=@$1" -F "key=$key" http://imgur.com/api/upload.xml
}

function log {
    if [[ $_verbose -eq 1 ]]; then
        echo "$@"
    fi
}

function out {
    if [[ $_quiet -eq 0 ]]; then
        echo "$@"
    fi
}

result=''
thumb=false
_verbose=0
_quiet=0
forum=false
select=false
nodel=false
download=false
existing=false
largeimageurl=''
largeimagedel=''
smallimageurl=''
smallimagedel=''

while :
do
    case $1 in
        -h | --help | -\?)
            usage
            exit 0
            ;;
        -q | --quiet)
            _quiet=1
            shift
            ;;
        -v | --verbose)
            _verbose=1
            log ':: verbose on'
            shift
            ;;
        -t | --thumb)
            thumb=true
            log ':: thumbnail flag on'
            shift
            ;;
        -f | --forum)
            forum=true
            log ':: forum flag detected... expect BBCode'
            shift
            ;;
        -s | --select)
            select=true
            log ':: -s for scrot on'
            shift
            ;;
        -n | --nodel)
            nodel=true
            log ':: nodel found as true, images wll be found in shots subdir'
            shift
            ;;
        -d | --download)
            download=true
            downloadsource="$2"
            log ":: found download source as $downloadsource"
            shift 2
            ;;
        -e | --existing)
            existing=true
            existingsource="$2"
            log ":: found filepath of existing image at $existingsource"
            shift 2
            ;;
        --)
            shift
            log ':: end of options... breaking...'
            break
            ;;
        -*)
            if [[ $quiet == false ]]; then
                echo "sour: Unknown option (ignored): $1" >&2
            fi
            log ':: please see sour --help'
            shift
            ;;
        *)
            break
            log 'hit *, breaking...'
            ;;
    esac
done

location="/home/$USER/sour/shots"
if [[ ! -d "$location" ]]; then
    out "No directory $location... creating"
fi

datestamp=$(date +"%F_%H-%M-%S")
log ":: datestamp created as $datestamp"
log ":: location created as $location"
largeimagelocation="$location/$datestamp.png"
log ":: filename of large image is $largeimagelocation"

if [[ $download == false && $existing == false ]]; then
    if [[ $select == true ]]; then
        scrot -s $largeimagelocation
        log ':: took scrot -s'
    else
        scrot $largeimagelocation
        log ':: took scrot'
    fi
elif [[ $download == true ]]; then
    curl $downloadsource -o $largeimagelocation
    log ":: downloaded $downloadsource to $largeimagelocation"
elif [[ $existing == true ]]; then
    cp $existingsource $largeimagelocation
    log ":: copied existing image $existingsource to $largeimagelocation"
fi

largeimageresponse=$(upload $largeimagelocation)
log ':: uploaded large image to imgur'

largeimageurl=$(echo $largeimageresponse | sed -r 's/.*<original_image>(.*)<\/original_image>.*/\1/')
log ":: parsed for largeimageresponse... $largeimageurl"

largeimagedel=$(echo $largeimageresponse | sed -r 's/.*<delete_page>(.*)<\/delete_page>.*/\1/')
log ":: parsed for largeimagedel... $largeimagedel"

if [[ $thumb == true || $forum == true ]]; then
    smallimagelocation="$location/$datestamp-small.png"
    log ":: filename of the thumbnail small image is $smallimagelocation"
    cp $largeimagelocation $smallimagelocation
    log ":: copied the original image $largeimagelocation to $smallimagelocation"
    mogrify -path $location -resize 250x250 $smallimagelocation
    log ":: using mogrify on $smallimagelocation"
    smallimageresponse=$(upload $smallimagelocation)
    log ':: uploaded small thumbnail to imgur'

    smallimageurl=$(echo $smallimageresponse | sed -r 's/.*<original_image>(.*)<\/original_image>.*/\1/')
    log ":: parsed for smallimageresponse... $smallimageurl"

    smallimagedel=$(echo $smallimageresponse | sed -r 's/.*<delete_page>(.*)<\/delete_page>.*/\1/')
    log ":: parsed for smallimagedel... $smallimagedel"
fi

if [[ $nodel == false ]]; then
    rm $largeimagelocation $smallimagelocation
    log ":: deleted $largeimagelocation $smallimagelocation"
fi

logdestfile="/home/prole/sour/logs/$(date +"%m-%d-%y").log"
echo -e "$datestamp: $largeimageurl $largeimagedel $smallimageurl $smallimagedel" >> "$logdestfile"
log ":: wrote to log at $logdestfile..."

if [[ ${#largeimageurl} -gt 45 || ${#largeimageurl} -eq 0 ]]; then
    out "Something went wrong with largeimageurl! Check the logs at $logdestfile" >&2
    log ":: largeimageurl = $largeimageurl"
    log ':: exiting due to error!'
fi
if [[ $thumb == true ]]; then
    if [[ ${#smallimageurl} -gt 45 || ${#smallimageurl} -eq 0 ]]; then
        out "Something went wrong with smallimageurl! Check the logs at $logdestfile" >&2
        log ":: smallimageurl = $smallimageurl"
        log ':: exiting due to error!'
    fi
fi


if [[ $forum == true ]]; then
    echo "[url=$largeimageurl][img]$smallimageurl[/img][/url]" | xclip
    log ':: sent BBCode-formatted output to xclip, use middle mouse button to paste'
elif [[ $thumb == true ]]; then
    echo "Full Size: $largeimageurl... Thumbnail: $smallimageurl" | xclip
    log ':: sent output (both full + thumbnail) to xclip, use middle mouse button to paste'
else
    echo "$largeimageurl" | xclip
    log ':: sent output (one image) to xclip, use middle mouse button to paste'
fi

log ':: done... exiting'
exit 0
