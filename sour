#!/bin/bash

usage() {
cat <<EOF
sour: usage:

  general:
    -h, --help  print this message
    -f          forum output (thumbnail and BBCode)
    -k          keep images when done (sent to current directory)
    -u URL      don't scrot; use URL as image
    -e PATH     don't scrot; use PATH as image
    -p MSG      prefix output with MSG

  scrot-specific:
    -c          show a countdown before taking the shot
    -d NUM      wait NUM seconds before taking a shot
    -s          interactively choose a window or rectangle with the mouse
EOF
}

if [[ $1 == '-h' || $1 == '--help' || $1 == '-?' ]]; then
    usage
    exit 0
fi

setDefaults() {
    # locations
    TMPDIR=${TMPDIR:-/tmp}
    location=$(mktemp -d "$TMPDIR/XXXXXXXXXXXXXX") ||\
        { die "could not create temporary directory within /tmp"; }
    rcfile="$HOME/.sourrc"

    datestamp="$(date +"%F_%H-%M-%S")"

    default_key="4c9573275251eae9792bb783d807801c"
    if [[ -s "$rcfile" ]]; then
        source $rcfile
        if [[ $key = '' ]]; then
            key="$default_key"
        fi
    else
        log_dir="$HOME/.sour/log"
        screenshot_dir="$PWD"
        key="$default_key"
    fi
    logdestfile="${log_dir}/$(date +"%m-%d-%y").log"

    # For createNeededFiles
    needed_files=("$logdestfile")
    needed_dirs=("$log_dir" $screenshot_dir)

    # for user options
    scrotcmd=''
    forum=0
    keep=0
    download=0
    existing=0

    # this will be changed depending on if there is a download or use of an
    # existing image
    extension='png'

    prefix=''
    largeimageurl=''
    largeimagedel=''
    smallimageurl=''
    smallimagedel=''

    # internal
    firstdone=0
    # POSIX variable (getopts)
    OPTIND=1

}

# Files and directories needed for successful execution:
#   - .sour/
#   - .sour/log/
#   - .sour/key
#   - .sour/log/(datestamp).log

# Creating directories before populating with needed_files.
createNeededFiles() {
    for directory in "${needed_dirs[@]}"; do
        if [[ ! -d "$directory" ]]; then
            if ! mkdir "$directory" > /dev/null 2>&1; then
                die "could not create directory $directory"
            fi
        fi
    done

    for file in "${needed_files[@]}"; do
        if [[ ! -e "$file" ]]; then
            if ! touch "$file" > /dev/null 2>&1; then
                die "could not create $file"
            fi
        fi
    done
}

moveTo() {
    local file="$1"
    local dest="$2"

    # checking that the file exists before moving
    if [[ -e "$file" ]]; then
        if ! mv "$file" "$dest" > /dev/null 2>&1; then
            # Try sending the file to home dir.
            if [[ ! $dest == $HOME ]]; then
                non_fatal "failed to move $file to $dest...sending to $HOME"
                moveTo $file $HOME
            else
                die "failed to move $file to $dest"
            fi
        fi
    fi
}

removeTemporaries() {
    if ((keep)); then
        if ((existing)); then
            if ((forum)); then
                moveTo "$smallimagelocation" "$screenshot_dir"
            fi

        # existing == false, and keep any images created
        else
            if ((forum)); then
                moveTo "$smallimagelocation" "$screenshot_dir"
            fi
            # Still need to move the regular image:
            moveTo "$largeimagelocation" "$screenshot_dir"
        fi

    # keep == false, remove everything
    else
        rm --force --recursive "$location"
    fi
}

setTraps() {
    trap 'removeTemporaries' EXIT
}

die() {
    echo "ERROR: $@" >&2
    exit 1
}

non_fatal() {
    echo "NON-FATAL: $@" >&2
}

sendOutput() {
    echo "$datestamp: $largeimageurl $largeimagedel\
 $smallimageurl $smallimagedel" >> "$logdestfile"

    if ((forum)); then
        echo "${prefix}[url=$largeimageurl][img]$smallimageurl[/img][/url]"
    else
        # The prefix is equal to '' if it was not changed by the user.
        echo "${prefix}${largeimageurl}"
    fi
}

uploadFile() {
    curl -s -F "image=@$1" -F "key=$key" http://imgur.com/api/upload.xml
}

parseAndReturn() {
    local resp="$@"

    local url=${resp#*<original_image>}
    url=${url%</original_image>*}
    
    local del=${resp#*<delete_page>}
    del=${del%</delete_page>*}

    # If correct, url will be length of 28
    local url_length="${#url}"
    (( url_length != 28))  && die "url too large or equal to zero"

    if ((firstdone)); then
        smallimageurl="$url"
        smallimagedel="$del"
    else
        largeimageurl="$url"
        largeimagedel="$del"
        firstdone=1
    fi

}
    
makeImageUpload() {
    largeimageresponse=$(uploadFile "$largeimagelocation")
    if [[ $largeimageresponse = *error* ]]; then
        if [[ $largeimageresponse = *1004* ]]; then
            non_fatal "Key defined in $rcfile is invalid... using default_key"
            key="$default_key"
            largeimageresponse=$(uploadFile "$largeimagelocation")
        else
            die "error found in response"
        fi
    fi
    parseAndReturn "$largeimageresponse"
    checkAndMakeThumb
}

checkAndMakeThumb() {
    if ((forum)); then
        if ((download || existing)); then
            cp "$largeimagelocation" "$smallimagelocation"
            mogrify -path "$location" -resize 250x250 "$smallimagelocation"
        fi
        smallimageresponse=$(uploadFile "$smallimagelocation")
        parseAndReturn "$smallimageresponse"
    fi
}

takeShot() {
    # These have to be defined after $extension has been changed by the option
    # parsing.
    largeimagelocation="$location/$datestamp.$extension"
    smallimagelocation="$location/$datestamp-thumb.$extension"

    if ! ((download || existing)); then
        scrot $scrotcmd "$largeimagelocation"
    elif ((download)); then
        curl "$dl_source" -o "$largeimagelocation" > /dev/null 2>&1
    elif ((existing)); then
        largeimagelocation="$ex_source"
    fi

    setTraps
}

setExtension() {
    extension="${1##*.}"
}

setDefaults

while getopts ":fscd:ku:e:p:" opt; do
    case "$opt" in
        f)
            forum=1
            scrotcmd="$scrotcmd --thumb 20"
            ;;
        s)
            scrotcmd="$scrotcmd --select"
            ;;
        c)
            scrotcmd="$scrotcmd --count"
            ;;
        d)
            scrotcmd="$scrotcmd --delay $OPTARG"
            ;;
        k)
            keep=1
            ;;
        u)
            download=1
            dl_source="$OPTARG"
            setExtension "$dl_source"
            ;;
        e)
            existing=1
            ex_source="$OPTARG"
            setExtension "$ex_source"
            ;;
        p)
            prefix="$OPTARG"
            ;;
        \?)
            die "Invalid option '-$OPTARG'"
            ;;
        :)
            die "Option '-$OPTARG' requires an argument."
            ;;
    esac
done

shift $((OPTIND-1))

[[ "$1" = "--" ]] && shift

createNeededFiles
takeShot
makeImageUpload
sendOutput
