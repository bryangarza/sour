#!/bin/bash

# Files and directories needed for successful execution:
#   - .sour/log/
#   - .sour/shots/
#   - .sour/key
#   - .sour/log/(date)

function createNeeded {
    local needed_dirs=("$HOME/.sour/log" "$HOME/.sour/shots")
    local needed_files=("$HOME/.sour/key" "$HOME/.sour/log/$(date +"%m-%d-%y").log")

    for directory in "${needed_dirs[@]}"; do
        if [[ ! -d "$directory" ]]; then
            mkdir "$directory"
            log "created $directory"
        fi
    done

    for file in "${needed_files[@]}"; do
        if [[ ! -e "$file" ]]; then
            touch "$file"
            log "created $file"
        fi
    done

    # File exists and isn't empty
    if [[ -s "$keyfile" ]]; then
        source $keyfile
        log "sourced $keyfile"
    else
        die "$keyfile is empty, exiting..."
    fi
}
    

# Have to check that files exists first, small one may not.
function removeFiles {
    local list_of_files=("$largeimagelocation" "$smallimagelocation")
    for file in "${list_of_files[@]}"; do
        if [[ -e $file ]]; then
            rm $file
            log "removed $file"
        fi
    done
}

function usage {
cat <<EOF
sour: usage:
    -h, --help              help
    -s, --select            select area (does scrot -s)
    -f, --forum             BBCode format for forums (uses [url=...] and a thumbnail)
    -t, --thumb             also make thumbnail (included as part of -f)
    -n, --nodelete          don't delete images when done
    -u, --url {URL}         don't scrot; download {URL} instead
    -e, --existing {PATH}   don't scrot; use image in {PATH}
    -p, --prefix "MSG: "    result is "MSG: URL" (not compatible with -t or -f)
        --debug             too much output

    - options must be used separately (i.e.: "-s -f", not "-sf")
EOF
}

location="$HOME/.sour/shots"
logdestfile="$HOME/.sour/log/$(date +"%m-%d-%y").log"
keyfile="$HOME/.sour/key"
datestamp=$(date +"%F_%H-%M-%S")

_debug=false
thumb=false
thumbcommand=''
forum=false
_select=false
nodelete=false
download=false
existing=false

prefix=''
largeimageurl=''
largeimagedel=''
smallimageurl=''
smallimagedel=''

result_url=''
result_del=''

function log {
    if [[ $_debug == true ]]; then
        echo -e "- $@"
    fi
}

function die {
    log "$@"
    removeFiles
    echo '' | xclip
    echo -en "\a"
    exit 1
}

while :
do
    case $1 in
        -h | --help | -\?) usage; exit 0;;
        --debug) _debug=true; log 'debug true' ; shift;;
        -t | --thumb) thumb=true; thumbcommand='--thumb 20'; log 'thumb true'; shift;;
        -f | --forum) forum=true; thumbcommand='--thumb 20'; log 'forum true'; shift;;
        -s | --select) _select=true; log '_select true'; shift;;
        -n | --nodelete) nodelete=true; log 'nodelete true'; shift;;
        -u | --url) download=true; dl_source="$2"; log 'url true'; shift 2;;
        -e | --existing) existing=true ; ex_source="$2" ; log 'existing true'
            shift 2;;
        -p | --prefix) prefix="$2"; log "using prefix '$prefix'"; shift;;
        --) shift; break;;
        -*) echo -e "unknown option: $1\n" >&2; usage; exit 1; shift;;
        *) break;;
    esac
done

createNeeded

function upload {
    curl -s -F "image=@$1" -F "key=$key" http://imgur.com/api/upload.xml
}

function parseAndReturn {
    log 'in fn parseAndReturn'
    local resp=$(echo "$@" | sed '/encoding/d')
    log "resp: $resp"
    local errorcheck$(echo "$response" | grep 'error')

    if [[ ! -z "$errorcheck" ]]; then
        die "error found! cleaning up and exiting...\n"
    fi

    local url=$(echo "$resp" | sed -r 's/.*<original_image>(.*)<\/original_image>.*/\1/')
    log "url: $url"

    local del=$(echo "$resp" | sed -r 's/.*<delete_page>(.*)<\/delete_page>.*/\1/')
    log "deletion url: $del"

    if [[ ${#url} -gt 45 || ${#url} -eq 0 ]]; then
        die "url too large or equal to zero"
    fi

    result_url="$url"
    result_del="$del"
    log 'leaving fn parseAndReturn'
}
    
function checkAndMakeThumb {
    if [[ $thumb == true || $forum == true ]]; then
        mogrify -path $location -resize 250x250 $smallimagelocation
        log "mogrify on $smallimagelocation done"
    fi
}

largeimagelocation="$location/$datestamp.png"
smallimagelocation="$location/$datestamp-thumb.png"
log "1st filename: $largeimagelocation"

if [[ $download == false && $existing == false ]]; then
    if [[ $_select == true ]]; then
        scrot -s $largeimagelocation $thumbcommand
        log 'scrot -s done'
    else
        scrot $largeimagelocation $thumbcommand
        log 'scrot done'
    fi
elif [[ $download == true ]]; then
    curl $dl_source -o $largeimagelocation > /dev/null 2>&1
    log "downloaded $dl_source to $largeimagelocation"
    checkAndMakeThumb
elif [[ $existing == true ]]; then
    cp $ex_source $largeimagelocation
    log "copied $ex_source to $largeimagelocation"
    checkAndMakeThumb
fi

largeimageresponse=$(upload $largeimagelocation)
log "uploaded image, response:\n$largeimageresponse"
parseAndReturn "$largeimageresponse"
largeimageurl="$result_url"
largeimagedel="$result_del"
result_url=''
result_del=''

if [[ $thumb == true || $forum == true ]]; then
    smallimageresponse=$(upload $smallimagelocation)
    log "uploaded thumb, response:\n$smallimageresponse"
    parseAndReturn "$smallimageresponse"
    smallimageurl="$result_url"
    smallimagedel="$result_del"
    result_url=''
    result_del=''
fi

[[ $nodelete == false ]] && removeFiles

echo -e "$datestamp: $largeimageurl $largeimagedel $smallimageurl $smallimagedel" >> "$logdestfile"
log "wrote to $logdestfile"

if [[ $forum == true ]]; then
    echo "[url=$largeimageurl][img]$smallimageurl[/img][/url]"
elif [[ $thumb == true ]]; then
    echo "full: $largeimageurl; thumbnail: $smallimageurl"
else
    # The prefix is equal to '' if it was not changed by the user.
    echo "${prefix}${largeimageurl}"
fi

log 'success'
