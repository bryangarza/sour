#!/bin/bash

function usage {
cat <<EOF
sour: usage:

    -h | --help              help
    -s | --select            select area (does scrot -s)
    -f | --forum             also make thumbnail, output with BBCode 
    -n | --nodelete          don't delete images when done
    -u | --url {URL}         don't scrot; download {URL} instead
    -e | --existing {PATH}   don't scrot; use image in {PATH}
    -p | --prefix "MSG: "    result is "MSG: URL" (not compatible with -t or -f)
    -d | --debug             too much output

    - options must be used separately (i.e.: "-s -f", not "-sf")
EOF
}

if [[ $1 == '-h' || $1 == '--help' || $1 == "-\?" ]]; then
    usage
    exit 0
fi

function setDefaults {
    TMPDIR=${TMPDIR:-/tmp}
    location=$(mktemp -d "$TMPDIR/XXXXXXXXXXXXXX") ||\
        { echo "ERROR could not create temporary file" >&2; exit 1; }
    log "location: $location"

    logdestfile="$HOME/.sour/log/$(date +"%m-%d-%y").log"
    keyfile="$HOME/.sour/key"
    datestamp=$(date +"%F_%H-%M-%S")

    _debug=false
    thumbcommand=''
    selectioncommand=''
    forum=false
    nodelete=false
    download=false
    existing=false

    prefix=''
    largeimageurl=''
    largeimagedel=''
    smallimageurl=''
    smallimagedel=''

    firstdone=false
}

# Files and directories needed for successful execution:
#   - .sour/log/
#   - .sour/key
#   - .sour/log/(date).log

function createNeededFiles {
    local needed_dirs=("$HOME/.sour/log")
    local needed_files=("$HOME/.sour/key" "$HOME/.sour/log/$(date +"%m-%d-%y").log")
    local default_key='https://raw.github.com/wolfcore/sour/master/key'

    for directory in "${needed_dirs[@]}"; do
        if [[ ! -d "$directory" ]]; then
            mkdir "$directory"
            log "created $directory"
        fi
    done

    for file in "${needed_files[@]}"; do
        if [[ ! -e "$file" ]]; then
            touch "$file"
            log "created $file"
        fi
    done

    # File exists and isn't empty
    if [[ ! -s "$keyfile" ]]; then
        curl $default_key -o $keyfile > /dev/null 2>&1
        log "restoring default key from $default_key"
    fi
    source $keyfile
    log "sourced $keyfile"
}

# Have to check that files exists first, small one may not.
function removeImages {
    local list_of_files=("$largeimagelocation" "$smallimagelocation")
    local working_dir="$PWD"
    if [[ $nodelete == false ]]; then

        if [[ $existing == false ]]; then
            for file in "${list_of_files[@]}"; do
                rm -f $file
                log "removed $file if existent"
            done
        else
            rm -f $smallimagelocation
            removed "$smallimagelocation if existent"
        fi

    else

        if [[ $existing == true && $forum == true ]]; then
            mv $smallimagelocation $working_dir
            log "$file moved to current directory"
        elif [[ $existing == false ]]; then
            for file in "${list_of_files[@]}"; do
                if [[ -e $file ]]; then
                    mv $file $working_dir
                    log "$file moved to current directory"
                fi
            done
        fi

    fi

    if [[ -d "$location" ]]; then
        rm --recursive $location
        log "removed $location"
    fi
}

function setTrap {
    trap 'removeImages' HUP QUIT
    trap 'removeImages; trap - INT; kill -INT $$' INT
    log 'traps set'
}

function log {
    if [[ $_debug == true ]]; then
        echo -e "- $@"
    fi
}

function die {
    echo -e "ERROR: $@\a" >&2
    removeImages
    echo '' | xclip
    exit 1
}

function sendOutput {
    echo "$datestamp: $largeimageurl $largeimagedel\
 $smallimageurl $smallimagedel" >> "$logdestfile"
    log "wrote to $logdestfile"

    if [[ $forum == true ]]; then
        echo "[url=$largeimageurl][img]$smallimageurl[/img][/url]"
    else
        # The prefix is equal to '' if it was not changed by the user.
        echo "${prefix}${largeimageurl}"
    fi
}

function upload {
    curl -s -F "image=@$1" -F "key=$key" http://imgur.com/api/upload.xml
}

function parseAndReturn {
    log "in fn parseAndReturn, firstdone is $firstdone"
    local resp=$(echo "$@" | sed '/encoding/d')
    local url=''
    local del=''
    log "resp: $resp"
    local errorcheck$(echo "$response" | grep 'error')

    if [[ ! -z "$errorcheck" ]]; then
        die "errorcheck failed!"
    fi

    local url=$(echo "$resp" | sed -r 's/.*<original_image>(.*)<\/original_image>.*/\1/')
    log "url: $url"

    local del=$(echo "$resp" | sed -r 's/.*<delete_page>(.*)<\/delete_page>.*/\1/')
    log "deletion url: $del"

    if [[ ${#url} -gt 45 || ${#url} -eq 0 ]]; then
        die "url too large or equal to zero"
    fi

    if [[ $firstdone == false ]]; then
        largeimageurl="$url"
        largeimagedel="$del"
        firstdone=true
    else
        smallimageurl="$url"
        smallimagedel="$del"
    fi

    log 'leaving fn parseAndReturn'
}
    
function makeImageUpload {
    largeimageresponse=$(upload $largeimagelocation)
    log "uploaded image, response:\n$largeimageresponse"
    parseAndReturn "$largeimageresponse"
    checkAndMakeThumb
    removeImages
}

function checkAndMakeThumb {
    if [[ $forum == true ]]; then
        if [[ $download == true || $existing == true ]]; then
            cp $largeimagelocation $smallimagelocation
            mogrify -path $location -resize 250x250 $smallimagelocation
            log "mogrify on $smallimagelocation done"
        fi
        smallimageresponse=$(upload $smallimagelocation)
        log "uploaded thumb, response:\n$smallimageresponse"
        parseAndReturn "$smallimageresponse"
    fi
}

function takeShot {
    largeimagelocation="$location/$datestamp.png"
    smallimagelocation="$location/$datestamp-thumb.png"
    log "1st filename: $largeimagelocation\nthumb: $smallimagelocation"

    if [[ $download == false && $existing == false ]]; then
        scrot $selectioncommand $largeimagelocation $thumbcommand
        log 'scrot done'
    elif [[ $download == true ]]; then
        curl $dl_source -o $largeimagelocation > /dev/null 2>&1
        log "downloaded $dl_source to $largeimagelocation"
    elif [[ $existing == true ]]; then
        largeimagelocation="$ex_source"
    fi

    setTrap
}

setDefaults

while :
do
    case $1 in
        -d | --debug)
            _debug=true
            log 'debug true'
            shift
            ;;
        -f | --forum)
            forum=true
            thumbcommand='--thumb 20'
            log 'forum true'
            shift
            ;;
        -s | --select)
            selectioncommand='--select'
            log 'select true'
            shift
            ;;
        -n | --nodelete)
            nodelete=true
            log 'nodelete true'
            shift
            ;;
        -u | --url)
            download=true
            dl_source="$2"
            log 'url true'
            shift 2
            ;;
        -e | --existing)
            existing=true
            ex_source="$2"
            log 'existing true'
            shift 2
            ;;
        -p | --prefix)
            prefix="$2"
            log "using prefix '$prefix'"
            shift
            ;;
        --) shift
            break
            ;;
        -*) echo -e "unknown option: $1\n" >&2
            usage
            exit 1
            shift
            ;;
        *) break
            ;;
    esac
done

createNeededFiles
takeShot
makeImageUpload
sendOutput

log 'success'
